syntax = "proto3";
package v1;

import "google/protobuf/timestamp.proto";

// Tasks we have to do
message ToDo {
  // Unique integer identifier of the todo task
  int64 id = 1;
  // Titla of the task
  string title = 2;
  // Detail description of the todo task
  string description = 3;
  // Date and time to remind the todo task
  google.protobuf.Timestamp reminder = 4;
}

// Request data to create new todo task
message CreateRequest {
  // API versioning it is my best practice to specify version explicitly
  string api = 1;

  // Task entity to add
  ToDo toDo = 2;
}

// Response that contains data for created todo task
message CreateResponse {
  // API versioning: it is my best practice to specify version explicitly
  string api = 1;

  // ID of created task
  int64 id = 2;
}

// Request data to read todo task
message ReadRequest {
  // API versioning: it is my best practice to specify version explicitly
  string api = 1;

  // Unique integer identifier of the todo task
  int64 id = 2;
}

// Contains todo task data specified in by ID request
message ReadResponse {
  // API versioning: it is my best practice to specify version explicitly
  string api = 1;

  // Task entity read by ID
  ToDo toDo = 2;
}

message UpdateRequest {
  string api = 1;
  ToDo toDo = 2;
}

message UpdateResponse {
  string api = 1;
  int64 updated = 2;

}

message DeleteRequest {
  string api = 1;
  int64 id = 2;
}

message DeleteResponse {
  string api = 1;
  // Contains number of entities have been deleted
  // Equals 1 in case of successful delete
  int64 deleted = 2;
}

message ReadAllRequest {
  string api = 1;
}

message ReadAllResponse {
  string api = 1;
  // List of all todo tasks
  repeated ToDo toDos = 2;
}

// Service to manage list of todo tasks
service ToDoService {
  // Create new todo task
  rpc Create(CreateRequest) returns (CreateResponse);

  // Read todo task
  rpc Read(ReadRequest) returns (ReadResponse);

  // Update todo task
  rpc Update(UpdateRequest) returns (UpdateResponse);

  // Delete todo task
  rpc Delete(DeleteRequest) returns (DeleteResponse);

  // Read all todo tasks
  rpc ReadAll(ReadAllRequest) returns (ReadAllResponse);
}
